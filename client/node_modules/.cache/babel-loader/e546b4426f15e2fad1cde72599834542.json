{"ast":null,"code":"var _arity = /*#__PURE__*/require(\"./internal/_arity\");\n\nvar _curry1 = /*#__PURE__*/require(\"./internal/_curry1\");\n\nvar _curry2 = /*#__PURE__*/require(\"./internal/_curry2\");\n\nvar _curryN = /*#__PURE__*/require(\"./internal/_curryN\");\n/**\r\n * Returns a curried equivalent of the provided function, with the specified\r\n * arity. The curried function has two unusual capabilities. First, its\r\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\r\n * following are equivalent:\r\n *\r\n *   - `g(1)(2)(3)`\r\n *   - `g(1)(2, 3)`\r\n *   - `g(1, 2)(3)`\r\n *   - `g(1, 2, 3)`\r\n *\r\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\r\n * \"gaps\", allowing partial application of any combination of arguments,\r\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\r\n * the following are equivalent:\r\n *\r\n *   - `g(1, 2, 3)`\r\n *   - `g(_, 2, 3)(1)`\r\n *   - `g(_, _, 3)(1)(2)`\r\n *   - `g(_, _, 3)(1, 2)`\r\n *   - `g(_, 2)(1)(3)`\r\n *   - `g(_, 2)(1, 3)`\r\n *   - `g(_, 2)(_, 3)(1)`\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.5.0\r\n * @category Function\r\n * @sig Number -> (* -> a) -> (* -> a)\r\n * @param {Number} length The arity for the returned function.\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} A new, curried function.\r\n * @see R.curry\r\n * @example\r\n *\r\n *      const sumArgs = (...args) => R.sum(args);\r\n *\r\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\r\n *      const f = curriedAddFourNumbers(1, 2);\r\n *      const g = f(3);\r\n *      g(4); //=> 10\r\n */\n\n\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n\n  return _arity(length, _curryN(length, [], fn));\n});\n\nmodule.exports = curryN;","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/ramda/src/curryN.js"],"names":["_arity","require","_curry1","_curry2","_curryN","curryN","length","fn","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GACV,aACAC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GACX,aACAD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,OAAO,GACX,aACAF,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIG,OAAO,GACX,aACAH,OAAO,CAAC,oBAAD,CAFP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAII,MAAM,GACV,aACAF,OAAO,CAAC,SAASE,MAAT,CAAgBC,MAAhB,EAAwBC,EAAxB,EAA4B;AAClC,MAAID,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOJ,OAAO,CAACK,EAAD,CAAd;AACD;;AAED,SAAOP,MAAM,CAACM,MAAD,EAASF,OAAO,CAACE,MAAD,EAAS,EAAT,EAAaC,EAAb,CAAhB,CAAb;AACD,CANM,CAFP;;AAUAC,MAAM,CAACC,OAAP,GAAiBJ,MAAjB","sourcesContent":["var _arity =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_arity\");\r\n\r\nvar _curry1 =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_curry1\");\r\n\r\nvar _curry2 =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_curry2\");\r\n\r\nvar _curryN =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_curryN\");\r\n/**\r\n * Returns a curried equivalent of the provided function, with the specified\r\n * arity. The curried function has two unusual capabilities. First, its\r\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\r\n * following are equivalent:\r\n *\r\n *   - `g(1)(2)(3)`\r\n *   - `g(1)(2, 3)`\r\n *   - `g(1, 2)(3)`\r\n *   - `g(1, 2, 3)`\r\n *\r\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\r\n * \"gaps\", allowing partial application of any combination of arguments,\r\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\r\n * the following are equivalent:\r\n *\r\n *   - `g(1, 2, 3)`\r\n *   - `g(_, 2, 3)(1)`\r\n *   - `g(_, _, 3)(1)(2)`\r\n *   - `g(_, _, 3)(1, 2)`\r\n *   - `g(_, 2)(1)(3)`\r\n *   - `g(_, 2)(1, 3)`\r\n *   - `g(_, 2)(_, 3)(1)`\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.5.0\r\n * @category Function\r\n * @sig Number -> (* -> a) -> (* -> a)\r\n * @param {Number} length The arity for the returned function.\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} A new, curried function.\r\n * @see R.curry\r\n * @example\r\n *\r\n *      const sumArgs = (...args) => R.sum(args);\r\n *\r\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\r\n *      const f = curriedAddFourNumbers(1, 2);\r\n *      const g = f(3);\r\n *      g(4); //=> 10\r\n */\r\n\r\n\r\nvar curryN =\r\n/*#__PURE__*/\r\n_curry2(function curryN(length, fn) {\r\n  if (length === 1) {\r\n    return _curry1(fn);\r\n  }\r\n\r\n  return _arity(length, _curryN(length, [], fn));\r\n});\r\n\r\nmodule.exports = curryN;"]},"metadata":{},"sourceType":"script"}