{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bdgcy\\\\Axis\\\\client\\\\src\\\\components\\\\ChannelSearch.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { FaSearch } from 'react-icons/fa';\nimport ResultsDropdown from './ResultsDropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = ({\n  setToggleContainer\n}) => {\n  _s();\n\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-serach__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(FaSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChannelSearch, \"BmvJQUMKP1VdRC1U80mpHY6vzPA=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChannelSearch;\nexport default ChannelSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/src/components/ChannelSearch.js"],"names":["React","useState","useEffect","useChatContext","FaSearch","ResultsDropdown","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","event","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from 'react'\r\nimport { useChatContext } from 'stream-chat-react'\r\nimport { FaSearch } from 'react-icons/fa'\r\n\r\nimport ResultsDropdown from './ResultsDropdown'\r\n\r\nconst ChannelSearch = ({ setToggleContainer }) => {\r\n    const { client, setActiveChannel } = useChatContext();\r\n    const [query, setQuery] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [teamChannels, setTeamChannels] = useState([])\r\n    const [directChannels, setDirectChannels] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(!query) {\r\n            setTeamChannels([]);\r\n            setDirectChannels([]);\r\n        }\r\n    }, [query])\r\n\r\n    const getChannels = async (text) => {\r\n        try {\r\n            const channelResponse = client.queryChannels({\r\n                type: 'team', \r\n                name: { $autocomplete: text }, \r\n                members: { $in: [client.userID]}\r\n            });\r\n            const userResponse = client.queryUsers({\r\n                id: { $ne: client.userID },\r\n                name: { $autocomplete: text },\r\n            })\r\n\r\n            const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\r\n\r\n            if(channels.length) setTeamChannels(channels);\r\n            if(users.length) setDirectChannels(users);\r\n        } catch (error) {\r\n            setQuery('')\r\n        }\r\n    }\r\n\r\n    const onSearch = (event) => {\r\n        event.preventDefault();\r\n\r\n        setLoading(true);\r\n        setQuery(event.target.value);\r\n        getChannels(event.target.value)\r\n    }\r\n\r\n    const setChannel = (channel) => {\r\n        setQuery('');\r\n        setActiveChannel(channel);\r\n    }\r\n\r\n    return (\r\n        <div className=\"channel-search__container\">\r\n            <div className=\"channel-search__input__wrapper\">\r\n                <div className=\"channel-serach__input__icon\">\r\n                    <FaSearch />\r\n                </div>\r\n                <input \r\n                    className=\"channel-search__input__text\" \r\n                    placeholder=\"Search\" \r\n                    type=\"text\" \r\n                    value={query}  \r\n                    onChange={onSearch}\r\n                />\r\n            </div>\r\n            { query && (\r\n                <ResultsDropdown \r\n                    teamChannels={teamChannels}\r\n                    directChannels={directChannels}\r\n                    loading={loading}\r\n                    setChannel={setChannel}\r\n                    setQuery={setQuery}\r\n                    setToggleContainer={setToggleContainer}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelSearch"]},"metadata":{},"sourceType":"module"}