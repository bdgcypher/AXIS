{"ast":null,"code":"'use strict';\n\nconst XmlElement = require('./XmlElement');\n\nconst XmlNode = require('./XmlNode');\n/**\r\nRepresents an XML document. All elements within the document are descendants of\r\nthis node.\r\n\r\n@public\r\n*/\n\n\nclass XmlDocument extends XmlNode {\n  /**\r\n  @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]\r\n  */\n  constructor(children = []) {\n    super();\n    /**\r\n    Child nodes of this document.\r\n      @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}\r\n    @public\r\n    */\n\n    this.children = children;\n  }\n\n  get document() {\n    return this;\n  }\n  /**\r\n  Root element of this document, or `null` if this document is empty.\r\n    @type {XmlElement?}\r\n  @public\r\n  */\n\n\n  get root() {\n    // @ts-ignore\n    return this.children.find(child => child instanceof XmlElement) || null;\n  }\n  /**\r\n  Text content of this document and all its descendants.\r\n    @type {string}\r\n  @public\r\n  */\n\n\n  get text() {\n    return this.children.map(child => 'text' in child ? child.text : '').join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_DOCUMENT;\n  }\n\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      children: this.children.map(child => child.toJSON())\n    });\n  }\n\n}\n\nmodule.exports = XmlDocument;\n/** @typedef {import('./XmlComment')} XmlComment */\n\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/@rgrove/parse-xml/src/lib/XmlDocument.js"],"names":["XmlElement","require","XmlNode","XmlDocument","constructor","children","document","root","find","child","text","map","join","type","TYPE_DOCUMENT","toJSON","Object","assign","prototype","call","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAN,SAA0BD,OAA1B,CAAkC;AAChC;AACF;AACA;AACEE,EAAAA,WAAW,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AACzB;AAEA;AACJ;AACA;AACA;AACA;;AAEI,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEU,MAAJC,IAAI,GAAG;AACT;AACA,WAAO,KAAKF,QAAL,CAAcG,IAAd,CAAoBC,KAAD,IAAWA,KAAK,YAAYT,UAA/C,KAA8D,IAArE;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEU,MAAJU,IAAI,GAAG;AACT,WAAO,KAAKL,QAAL,CACJM,GADI,CACAF,KAAK,IAAI,UAAUA,KAAV,GAAkBA,KAAK,CAACC,IAAxB,GAA+B,EADxC,EAEJE,IAFI,CAEC,EAFD,CAAP;AAGD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAOX,OAAO,CAACY,aAAf;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAOC,MAAM,CAACC,MAAP,CAAcf,OAAO,CAACgB,SAAR,CAAkBH,MAAlB,CAAyBI,IAAzB,CAA8B,IAA9B,CAAd,EAAmD;AACxDd,MAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcM,GAAd,CAAkBF,KAAK,IAAIA,KAAK,CAACM,MAAN,EAA3B;AAD8C,KAAnD,CAAP;AAGD;;AAnD+B;;AAsDlCK,MAAM,CAACC,OAAP,GAAiBlB,WAAjB;AAEA;;AACA","sourcesContent":["'use strict';\r\n\r\nconst XmlElement = require('./XmlElement');\r\nconst XmlNode = require('./XmlNode');\r\n\r\n/**\r\nRepresents an XML document. All elements within the document are descendants of\r\nthis node.\r\n\r\n@public\r\n*/\r\nclass XmlDocument extends XmlNode {\r\n  /**\r\n  @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]\r\n  */\r\n  constructor(children = []) {\r\n    super();\r\n\r\n    /**\r\n    Child nodes of this document.\r\n\r\n    @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}\r\n    @public\r\n    */\r\n    this.children = children;\r\n  }\r\n\r\n  get document() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n  Root element of this document, or `null` if this document is empty.\r\n\r\n  @type {XmlElement?}\r\n  @public\r\n  */\r\n  get root() {\r\n    // @ts-ignore\r\n    return this.children.find((child) => child instanceof XmlElement) || null;\r\n  }\r\n\r\n  /**\r\n  Text content of this document and all its descendants.\r\n\r\n  @type {string}\r\n  @public\r\n  */\r\n  get text() {\r\n    return this.children\r\n      .map(child => 'text' in child ? child.text : '')\r\n      .join('');\r\n  }\r\n\r\n  get type() {\r\n    return XmlNode.TYPE_DOCUMENT;\r\n  }\r\n\r\n  toJSON() {\r\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\r\n      children: this.children.map(child => child.toJSON()),\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = XmlDocument;\r\n\r\n/** @typedef {import('./XmlComment')} XmlComment */\r\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\r\n"]},"metadata":{},"sourceType":"script"}