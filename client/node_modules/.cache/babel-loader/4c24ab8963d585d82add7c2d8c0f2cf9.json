{"ast":null,"code":"import deburr from 'lodash.deburr';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport builtinReplacements from './replacements.js';\n\nconst doCustomReplacements = (string, replacements) => {\n  for (const [key, value] of replacements) {\n    // TODO: Use `String#replaceAll()` when targeting Node.js 16.\n    string = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);\n  }\n\n  return string;\n};\n\nexport default function transliterate(string, options) {\n  if (typeof string !== 'string') {\n    throw new TypeError(`Expected a string, got \\`${typeof string}\\``);\n  }\n\n  options = {\n    customReplacements: [],\n    ...options\n  };\n  const customReplacements = new Map([...builtinReplacements, ...options.customReplacements]);\n  string = string.normalize();\n  string = doCustomReplacements(string, customReplacements);\n  string = deburr(string);\n  return string;\n}","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/@sindresorhus/transliterate/index.js"],"names":["deburr","escapeStringRegexp","builtinReplacements","doCustomReplacements","string","replacements","key","value","replace","RegExp","transliterate","options","TypeError","customReplacements","Map","normalize"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;AACtD,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BF,YAA3B,EAAyC;AACxC;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAe,IAAIC,MAAJ,CAAWR,kBAAkB,CAACK,GAAD,CAA7B,EAAoC,GAApC,CAAf,EAAyDC,KAAzD,CAAT;AACA;;AAED,SAAOH,MAAP;AACA,CAPD;;AASA,eAAe,SAASM,aAAT,CAAuBN,MAAvB,EAA+BO,OAA/B,EAAwC;AACtD,MAAI,OAAOP,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIQ,SAAJ,CAAe,4BAA2B,OAAOR,MAAO,IAAxD,CAAN;AACA;;AAEDO,EAAAA,OAAO,GAAG;AACTE,IAAAA,kBAAkB,EAAE,EADX;AAET,OAAGF;AAFM,GAAV;AAKA,QAAME,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAClC,GAAGZ,mBAD+B,EAElC,GAAGS,OAAO,CAACE,kBAFuB,CAAR,CAA3B;AAKAT,EAAAA,MAAM,GAAGA,MAAM,CAACW,SAAP,EAAT;AACAX,EAAAA,MAAM,GAAGD,oBAAoB,CAACC,MAAD,EAASS,kBAAT,CAA7B;AACAT,EAAAA,MAAM,GAAGJ,MAAM,CAACI,MAAD,CAAf;AAEA,SAAOA,MAAP;AACA","sourcesContent":["import deburr from 'lodash.deburr';\r\nimport escapeStringRegexp from 'escape-string-regexp';\r\nimport builtinReplacements from './replacements.js';\r\n\r\nconst doCustomReplacements = (string, replacements) => {\r\n\tfor (const [key, value] of replacements) {\r\n\t\t// TODO: Use `String#replaceAll()` when targeting Node.js 16.\r\n\t\tstring = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);\r\n\t}\r\n\r\n\treturn string;\r\n};\r\n\r\nexport default function transliterate(string, options) {\r\n\tif (typeof string !== 'string') {\r\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\r\n\t}\r\n\r\n\toptions = {\r\n\t\tcustomReplacements: [],\r\n\t\t...options\r\n\t};\r\n\r\n\tconst customReplacements = new Map([\r\n\t\t...builtinReplacements,\r\n\t\t...options.customReplacements\r\n\t]);\r\n\r\n\tstring = string.normalize();\r\n\tstring = doCustomReplacements(string, customReplacements);\r\n\tstring = deburr(string);\r\n\r\n\treturn string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}