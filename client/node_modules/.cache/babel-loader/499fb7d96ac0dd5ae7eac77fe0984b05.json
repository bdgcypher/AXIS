{"ast":null,"code":"/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function processMessages(params) {\n  var _a, _b, _c;\n\n  var disableDateSeparator = params.disableDateSeparator,\n      hideDeletedMessages = params.hideDeletedMessages,\n      hideNewMessageSeparator = params.hideNewMessageSeparator,\n      lastRead = params.lastRead,\n      messages = params.messages,\n      separateGiphyPreview = params.separateGiphyPreview,\n      setGiphyPreviewMessage = params.setGiphyPreviewMessage,\n      threadList = params.threadList,\n      userId = params.userId;\n  var unread = false;\n  var ephemeralMessagePresent = false;\n  var lastDateSeparator;\n  var newMessages = [];\n\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n\n    if (hideDeletedMessages && message.type === 'deleted') {\n      continue;\n    }\n\n    if (separateGiphyPreview && setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {\n      ephemeralMessagePresent = true;\n      setGiphyPreviewMessage(message);\n      continue;\n    }\n\n    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || '';\n    var prevMessageDate = messageDate;\n    var previousMessage = messages[i - 1];\n\n    if (i > 0 && !disableDateSeparator && !threadList && previousMessage.created_at && isDate(previousMessage.created_at)) {\n      prevMessageDate = previousMessage.created_at.toDateString();\n    }\n\n    if (!unread && !hideNewMessageSeparator && !threadList) {\n      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false; // do not show date separator for current user's messages\n\n      if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id,\n          unread: unread\n        });\n      }\n    }\n\n    if (!disableDateSeparator && !threadList && (i === 0 || messageDate !== prevMessageDate || hideDeletedMessages && ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' && lastDateSeparator !== messageDate) && ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n    ) {\n      lastDateSeparator = messageDate;\n      newMessages.push({\n        customType: 'message.date',\n        date: message.created_at,\n        id: message.id\n      }, message);\n    } else {\n      newMessages.push(message);\n    }\n  } // clean up the giphy preview component state after a Cancel action\n\n\n  if (separateGiphyPreview && !ephemeralMessagePresent) {\n    setGiphyPreviewMessage === null || setGiphyPreviewMessage === void 0 ? void 0 : setGiphyPreviewMessage(undefined);\n  }\n\n  return newMessages;\n}; // fast since it usually iterates just the last few messages\n\nexport var getLastReceived = function getLastReceived(messages) {\n  for (var i = messages.length - 1; i > 0; i -= 1) {\n    if (messages[i].status === 'received') {\n      return messages[i].id;\n    }\n  }\n\n  return null;\n};\nexport var getReadStates = function getReadStates(messages, read, returnAllReadData) {\n  if (read === void 0) {\n    read = {};\n  } // create object with empty array for each message id\n\n\n  var readData = {};\n  Object.values(read).forEach(function (readState) {\n    if (!readState.last_read) return;\n    var userLastReadMsgId; // loop messages sent by current user and add read data for other users in channel\n\n    messages.forEach(function (msg) {\n      if (msg.updated_at && msg.updated_at < readState.last_read) {\n        userLastReadMsgId = msg.id; // if true, save other user's read data for all messages they've read\n\n        if (returnAllReadData) {\n          if (!readData[userLastReadMsgId]) {\n            readData[userLastReadMsgId] = [];\n          }\n\n          readData[userLastReadMsgId].push(readState.user);\n        }\n      }\n    }); // if true, only save read data for other user's last read message\n\n    if (userLastReadMsgId && !returnAllReadData) {\n      if (!readData[userLastReadMsgId]) {\n        readData[userLastReadMsgId] = [];\n      }\n\n      readData[userLastReadMsgId].push(readState.user);\n    }\n  });\n  return readData;\n};\nexport var insertIntro = function insertIntro(messages, headerPosition) {\n  var newMessages = messages;\n  var intro = {\n    customType: 'channel.intro'\n  }; // if no headerPosition is set, HeaderComponent will go at the top\n\n  if (!headerPosition) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // if no messages, intro gets inserted\n\n\n  if (!newMessages.length) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // else loop over the messages\n\n\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n    var nextMessage = messages[i + 1];\n    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null; // header position is smaller than message time so comes after;\n\n    if (messageTime && messageTime < headerPosition) {\n      // if header position is also smaller than message time continue;\n      if (nextMessageTime && nextMessageTime < headerPosition) {\n        if (messages[i + 1] && messages[i + 1].customType === 'message.date') continue;\n\n        if (!nextMessageTime) {\n          newMessages.push(intro);\n          return newMessages;\n        }\n\n        continue;\n      } else {\n        newMessages.splice(i + 1, 0, intro);\n        return newMessages;\n      }\n    }\n  }\n\n  return newMessages;\n};\nexport var getGroupStyles = function getGroupStyles(message, previousMessage, nextMessage, noGroupByUser) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  if (message.customType === 'message.date') return '';\n  if (message.customType === 'channel.intro') return '';\n  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) return 'single';\n  var isTopMessage = !previousMessage || previousMessage.customType === 'channel.intro' || previousMessage.customType === 'message.date' || previousMessage.type === 'system' || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.type === 'error' || previousMessage.deleted_at;\n  var isBottomMessage = !nextMessage || nextMessage.customType === 'message.date' || nextMessage.type === 'system' || nextMessage.customType === 'channel.intro' || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.type === 'error' || nextMessage.deleted_at;\n\n  if (!isTopMessage && !isBottomMessage) {\n    if (message.deleted_at || message.type === 'error') return 'single';\n    return 'middle';\n  }\n\n  if (isBottomMessage) {\n    if (isTopMessage || message.deleted_at || message.type === 'error') return 'single';\n    return 'bottom';\n  }\n\n  if (isTopMessage) return 'top';\n  return '';\n};","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/stream-chat-react/dist/components/MessageList/utils.js"],"names":["isDate","processMessages","params","_a","_b","_c","disableDateSeparator","hideDeletedMessages","hideNewMessageSeparator","lastRead","messages","separateGiphyPreview","setGiphyPreviewMessage","threadList","userId","unread","ephemeralMessagePresent","lastDateSeparator","newMessages","i","length","message","type","command","messageDate","created_at","toDateString","prevMessageDate","previousMessage","Date","user","id","push","customType","date","undefined","getLastReceived","status","getReadStates","read","returnAllReadData","readData","Object","values","forEach","readState","last_read","userLastReadMsgId","msg","updated_at","insertIntro","headerPosition","intro","unshift","messageTime","getTime","nextMessage","nextMessageTime","splice","getGroupStyles","noGroupByUser","_d","_e","_f","_g","attachments","isTopMessage","deleted_at","isBottomMessage"],"mappings":"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","sourcesContent":["/* eslint-disable no-continue */\r\nimport { isDate } from '../../context/TranslationContext';\r\nexport var processMessages = function (params) {\r\n    var _a, _b, _c;\r\n    var disableDateSeparator = params.disableDateSeparator, hideDeletedMessages = params.hideDeletedMessages, hideNewMessageSeparator = params.hideNewMessageSeparator, lastRead = params.lastRead, messages = params.messages, separateGiphyPreview = params.separateGiphyPreview, setGiphyPreviewMessage = params.setGiphyPreviewMessage, threadList = params.threadList, userId = params.userId;\r\n    var unread = false;\r\n    var ephemeralMessagePresent = false;\r\n    var lastDateSeparator;\r\n    var newMessages = [];\r\n    for (var i = 0; i < messages.length; i += 1) {\r\n        var message = messages[i];\r\n        if (hideDeletedMessages && message.type === 'deleted') {\r\n            continue;\r\n        }\r\n        if (separateGiphyPreview &&\r\n            setGiphyPreviewMessage &&\r\n            message.type === 'ephemeral' &&\r\n            message.command === 'giphy') {\r\n            ephemeralMessagePresent = true;\r\n            setGiphyPreviewMessage(message);\r\n            continue;\r\n        }\r\n        var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';\r\n        var prevMessageDate = messageDate;\r\n        var previousMessage = messages[i - 1];\r\n        if (i > 0 &&\r\n            !disableDateSeparator &&\r\n            !threadList &&\r\n            previousMessage.created_at &&\r\n            isDate(previousMessage.created_at)) {\r\n            prevMessageDate = previousMessage.created_at.toDateString();\r\n        }\r\n        if (!unread && !hideNewMessageSeparator && !threadList) {\r\n            unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;\r\n            // do not show date separator for current user's messages\r\n            if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\r\n                newMessages.push({\r\n                    customType: 'message.date',\r\n                    date: message.created_at,\r\n                    id: message.id,\r\n                    unread: unread,\r\n                });\r\n            }\r\n        }\r\n        if (!disableDateSeparator &&\r\n            !threadList &&\r\n            (i === 0 ||\r\n                messageDate !== prevMessageDate ||\r\n                (hideDeletedMessages &&\r\n                    ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' &&\r\n                    lastDateSeparator !== messageDate)) &&\r\n            ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\r\n        ) {\r\n            lastDateSeparator = messageDate;\r\n            newMessages.push({\r\n                customType: 'message.date',\r\n                date: message.created_at,\r\n                id: message.id,\r\n            }, message);\r\n        }\r\n        else {\r\n            newMessages.push(message);\r\n        }\r\n    }\r\n    // clean up the giphy preview component state after a Cancel action\r\n    if (separateGiphyPreview && !ephemeralMessagePresent) {\r\n        setGiphyPreviewMessage === null || setGiphyPreviewMessage === void 0 ? void 0 : setGiphyPreviewMessage(undefined);\r\n    }\r\n    return newMessages;\r\n};\r\n// fast since it usually iterates just the last few messages\r\nexport var getLastReceived = function (messages) {\r\n    for (var i = messages.length - 1; i > 0; i -= 1) {\r\n        if (messages[i].status === 'received') {\r\n            return messages[i].id;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nexport var getReadStates = function (messages, read, returnAllReadData) {\r\n    if (read === void 0) { read = {}; }\r\n    // create object with empty array for each message id\r\n    var readData = {};\r\n    Object.values(read).forEach(function (readState) {\r\n        if (!readState.last_read)\r\n            return;\r\n        var userLastReadMsgId;\r\n        // loop messages sent by current user and add read data for other users in channel\r\n        messages.forEach(function (msg) {\r\n            if (msg.updated_at && msg.updated_at < readState.last_read) {\r\n                userLastReadMsgId = msg.id;\r\n                // if true, save other user's read data for all messages they've read\r\n                if (returnAllReadData) {\r\n                    if (!readData[userLastReadMsgId]) {\r\n                        readData[userLastReadMsgId] = [];\r\n                    }\r\n                    readData[userLastReadMsgId].push(readState.user);\r\n                }\r\n            }\r\n        });\r\n        // if true, only save read data for other user's last read message\r\n        if (userLastReadMsgId && !returnAllReadData) {\r\n            if (!readData[userLastReadMsgId]) {\r\n                readData[userLastReadMsgId] = [];\r\n            }\r\n            readData[userLastReadMsgId].push(readState.user);\r\n        }\r\n    });\r\n    return readData;\r\n};\r\nexport var insertIntro = function (messages, headerPosition) {\r\n    var newMessages = messages;\r\n    var intro = { customType: 'channel.intro' };\r\n    // if no headerPosition is set, HeaderComponent will go at the top\r\n    if (!headerPosition) {\r\n        newMessages.unshift(intro);\r\n        return newMessages;\r\n    }\r\n    // if no messages, intro gets inserted\r\n    if (!newMessages.length) {\r\n        newMessages.unshift(intro);\r\n        return newMessages;\r\n    }\r\n    // else loop over the messages\r\n    for (var i = 0; i < messages.length; i += 1) {\r\n        var message = messages[i];\r\n        var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\r\n        var nextMessage = messages[i + 1];\r\n        var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)\r\n            ? nextMessage.created_at.getTime()\r\n            : null;\r\n        // header position is smaller than message time so comes after;\r\n        if (messageTime && messageTime < headerPosition) {\r\n            // if header position is also smaller than message time continue;\r\n            if (nextMessageTime && nextMessageTime < headerPosition) {\r\n                if (messages[i + 1] && messages[i + 1].customType === 'message.date')\r\n                    continue;\r\n                if (!nextMessageTime) {\r\n                    newMessages.push(intro);\r\n                    return newMessages;\r\n                }\r\n                continue;\r\n            }\r\n            else {\r\n                newMessages.splice(i + 1, 0, intro);\r\n                return newMessages;\r\n            }\r\n        }\r\n    }\r\n    return newMessages;\r\n};\r\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    if (message.customType === 'message.date')\r\n        return '';\r\n    if (message.customType === 'channel.intro')\r\n        return '';\r\n    if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)\r\n        return 'single';\r\n    var isTopMessage = !previousMessage ||\r\n        previousMessage.customType === 'channel.intro' ||\r\n        previousMessage.customType === 'message.date' ||\r\n        previousMessage.type === 'system' ||\r\n        ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||\r\n        ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||\r\n        previousMessage.type === 'error' ||\r\n        previousMessage.deleted_at;\r\n    var isBottomMessage = !nextMessage ||\r\n        nextMessage.customType === 'message.date' ||\r\n        nextMessage.type === 'system' ||\r\n        nextMessage.customType === 'channel.intro' ||\r\n        ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||\r\n        ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||\r\n        nextMessage.type === 'error' ||\r\n        nextMessage.deleted_at;\r\n    if (!isTopMessage && !isBottomMessage) {\r\n        if (message.deleted_at || message.type === 'error')\r\n            return 'single';\r\n        return 'middle';\r\n    }\r\n    if (isBottomMessage) {\r\n        if (isTopMessage || message.deleted_at || message.type === 'error')\r\n            return 'single';\r\n        return 'bottom';\r\n    }\r\n    if (isTopMessage)\r\n        return 'top';\r\n    return '';\r\n};\r\n"]},"metadata":{},"sourceType":"module"}