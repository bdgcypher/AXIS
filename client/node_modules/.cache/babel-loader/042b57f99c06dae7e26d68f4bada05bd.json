{"ast":null,"code":"var _curry1 = /*#__PURE__*/require(\"./internal/_curry1\");\n/**\r\n * Gives a single-word string description of the (native) type of a value,\r\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\r\n * attempt to distinguish user Object types any further, reporting them all as\r\n * 'Object'.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Type\r\n * @sig (* -> {*}) -> String\r\n * @param {*} val The value to test\r\n * @return {String}\r\n * @example\r\n *\r\n *      R.type({}); //=> \"Object\"\r\n *      R.type(1); //=> \"Number\"\r\n *      R.type(false); //=> \"Boolean\"\r\n *      R.type('s'); //=> \"String\"\r\n *      R.type(null); //=> \"Null\"\r\n *      R.type([]); //=> \"Array\"\r\n *      R.type(/[A-z]/); //=> \"RegExp\"\r\n *      R.type(() => {}); //=> \"Function\"\r\n *      R.type(undefined); //=> \"Undefined\"\r\n */\n\n\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\n\nmodule.exports = type;","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/ramda/src/type.js"],"names":["_curry1","require","type","val","undefined","Object","prototype","toString","call","slice","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GACX,aACAC,OAAO,CAAC,oBAAD,CAFP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,IAAI,GACR,aACAF,OAAO,CAAC,SAASE,IAAT,CAAcC,GAAd,EAAmB;AACzB,SAAOA,GAAG,KAAK,IAAR,GAAe,MAAf,GAAwBA,GAAG,KAAKC,SAAR,GAAoB,WAApB,GAAkCC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,GAA/B,EAAoCM,KAApC,CAA0C,CAA1C,EAA6C,CAAC,CAA9C,CAAjE;AACD,CAFM,CAFP;;AAMAC,MAAM,CAACC,OAAP,GAAiBT,IAAjB","sourcesContent":["var _curry1 =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_curry1\");\r\n/**\r\n * Gives a single-word string description of the (native) type of a value,\r\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\r\n * attempt to distinguish user Object types any further, reporting them all as\r\n * 'Object'.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Type\r\n * @sig (* -> {*}) -> String\r\n * @param {*} val The value to test\r\n * @return {String}\r\n * @example\r\n *\r\n *      R.type({}); //=> \"Object\"\r\n *      R.type(1); //=> \"Number\"\r\n *      R.type(false); //=> \"Boolean\"\r\n *      R.type('s'); //=> \"String\"\r\n *      R.type(null); //=> \"Null\"\r\n *      R.type([]); //=> \"Array\"\r\n *      R.type(/[A-z]/); //=> \"RegExp\"\r\n *      R.type(() => {}); //=> \"Function\"\r\n *      R.type(undefined); //=> \"Undefined\"\r\n */\r\n\r\n\r\nvar type =\r\n/*#__PURE__*/\r\n_curry1(function type(val) {\r\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\r\n});\r\n\r\nmodule.exports = type;"]},"metadata":{},"sourceType":"script"}