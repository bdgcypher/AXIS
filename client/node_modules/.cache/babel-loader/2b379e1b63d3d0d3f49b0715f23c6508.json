{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport var useEmojiPicker = function useEmojiPicker(state, dispatch, insertText) {\n  var emojiPickerRef = useRef(null);\n  var closeEmojiPicker = useCallback(function (event) {\n    if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  }, [emojiPickerRef]);\n  var openEmojiPicker = useCallback(function (event) {\n    dispatch({\n      type: 'setEmojiPickerIsOpen',\n      value: true\n    }); // Prevent event from bubbling to document, so the close handler is never called for this event\n\n    event.stopPropagation();\n  }, []);\n\n  var handleEmojiKeyDown = function handleEmojiKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\n      event.preventDefault();\n      /**\r\n       * TODO: fix the below at some point because this type casting is wrong\r\n       * and just forced to not have warnings currently with the unknown casting\r\n       */\n\n      openEmojiPicker(event);\n    }\n  };\n\n  var handleEmojiEscape = function handleEmojiEscape(event) {\n    if (event.key === 'Escape') {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  };\n\n  useEffect(function () {\n    if (state.emojiPickerIsOpen) {\n      document.addEventListener('click', closeEmojiPicker, false);\n      document.addEventListener('keydown', handleEmojiEscape);\n    }\n\n    return function () {\n      document.removeEventListener('click', closeEmojiPicker, false);\n      document.removeEventListener('keydown', handleEmojiEscape);\n    };\n  }, [closeEmojiPicker, state.emojiPickerIsOpen]);\n  var onSelectEmoji = useCallback(function (emoji) {\n    return insertText(emoji.native);\n  }, [insertText]);\n  return {\n    closeEmojiPicker: closeEmojiPicker,\n    emojiPickerRef: emojiPickerRef,\n    handleEmojiKeyDown: handleEmojiKeyDown,\n    onSelectEmoji: onSelectEmoji,\n    openEmojiPicker: openEmojiPicker\n  };\n};","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useEmojiPicker.js"],"names":["useCallback","useEffect","useRef","useEmojiPicker","state","dispatch","insertText","emojiPickerRef","closeEmojiPicker","event","current","contains","target","type","value","openEmojiPicker","stopPropagation","handleEmojiKeyDown","key","preventDefault","handleEmojiEscape","emojiPickerIsOpen","document","addEventListener","removeEventListener","onSelectEmoji","emoji","native"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,OAAO,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,UAA3B,EAAuC;AAC/D,MAAIC,cAAc,GAAGL,MAAM,CAAC,IAAD,CAA3B;AACA,MAAIM,gBAAgB,GAAGR,WAAW,CAAC,UAAUS,KAAV,EAAiB;AAChD,QAAIF,cAAc,CAACG,OAAf,IAA0B,CAACH,cAAc,CAACG,OAAf,CAAuBC,QAAvB,CAAgCF,KAAK,CAACG,MAAtC,CAA/B,EAA8E;AAC1EP,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAE,sBADD;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAD,CAAR;AAIH;AACJ,GAPiC,EAO/B,CAACP,cAAD,CAP+B,CAAlC;AAQA,MAAIQ,eAAe,GAAGf,WAAW,CAAC,UAAUS,KAAV,EAAiB;AAC/CJ,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAE,sBADD;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAD,CAAR,CAD+C,CAK/C;;AACAL,IAAAA,KAAK,CAACO,eAAN;AACH,GAPgC,EAO9B,EAP8B,CAAjC;;AAQA,MAAIC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAUR,KAAV,EAAiB;AACtC,QAAIA,KAAK,CAACS,GAAN,KAAc,GAAd,IAAqBT,KAAK,CAACS,GAAN,KAAc,OAAnC,IAA8CT,KAAK,CAACS,GAAN,KAAc,UAAhE,EAA4E;AACxET,MAAAA,KAAK,CAACU,cAAN;AACA;AACZ;AACA;AACA;;AACYJ,MAAAA,eAAe,CAACN,KAAD,CAAf;AACH;AACJ,GATD;;AAUA,MAAIW,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUX,KAAV,EAAiB;AACrC,QAAIA,KAAK,CAACS,GAAN,KAAc,QAAlB,EAA4B;AACxBb,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAE,sBADD;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAD,CAAR;AAIH;AACJ,GAPD;;AAQAb,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIG,KAAK,CAACiB,iBAAV,EAA6B;AACzBC,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCf,gBAAnC,EAAqD,KAArD;AACAc,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,iBAArC;AACH;;AACD,WAAO,YAAY;AACfE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsChB,gBAAtC,EAAwD,KAAxD;AACAc,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCJ,iBAAxC;AACH,KAHD;AAIH,GATQ,EASN,CAACZ,gBAAD,EAAmBJ,KAAK,CAACiB,iBAAzB,CATM,CAAT;AAUA,MAAII,aAAa,GAAGzB,WAAW,CAAC,UAAU0B,KAAV,EAAiB;AAAE,WAAOpB,UAAU,CAACoB,KAAK,CAACC,MAAP,CAAjB;AAAkC,GAAtD,EAAwD,CACnFrB,UADmF,CAAxD,CAA/B;AAGA,SAAO;AACHE,IAAAA,gBAAgB,EAAEA,gBADf;AAEHD,IAAAA,cAAc,EAAEA,cAFb;AAGHU,IAAAA,kBAAkB,EAAEA,kBAHjB;AAIHQ,IAAAA,aAAa,EAAEA,aAJZ;AAKHV,IAAAA,eAAe,EAAEA;AALd,GAAP;AAOH,CAxDM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\r\nexport var useEmojiPicker = function (state, dispatch, insertText) {\r\n    var emojiPickerRef = useRef(null);\r\n    var closeEmojiPicker = useCallback(function (event) {\r\n        if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {\r\n            dispatch({\r\n                type: 'setEmojiPickerIsOpen',\r\n                value: false,\r\n            });\r\n        }\r\n    }, [emojiPickerRef]);\r\n    var openEmojiPicker = useCallback(function (event) {\r\n        dispatch({\r\n            type: 'setEmojiPickerIsOpen',\r\n            value: true,\r\n        });\r\n        // Prevent event from bubbling to document, so the close handler is never called for this event\r\n        event.stopPropagation();\r\n    }, []);\r\n    var handleEmojiKeyDown = function (event) {\r\n        if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\r\n            event.preventDefault();\r\n            /**\r\n             * TODO: fix the below at some point because this type casting is wrong\r\n             * and just forced to not have warnings currently with the unknown casting\r\n             */\r\n            openEmojiPicker(event);\r\n        }\r\n    };\r\n    var handleEmojiEscape = function (event) {\r\n        if (event.key === 'Escape') {\r\n            dispatch({\r\n                type: 'setEmojiPickerIsOpen',\r\n                value: false,\r\n            });\r\n        }\r\n    };\r\n    useEffect(function () {\r\n        if (state.emojiPickerIsOpen) {\r\n            document.addEventListener('click', closeEmojiPicker, false);\r\n            document.addEventListener('keydown', handleEmojiEscape);\r\n        }\r\n        return function () {\r\n            document.removeEventListener('click', closeEmojiPicker, false);\r\n            document.removeEventListener('keydown', handleEmojiEscape);\r\n        };\r\n    }, [closeEmojiPicker, state.emojiPickerIsOpen]);\r\n    var onSelectEmoji = useCallback(function (emoji) { return insertText(emoji.native); }, [\r\n        insertText,\r\n    ]);\r\n    return {\r\n        closeEmojiPicker: closeEmojiPicker,\r\n        emojiPickerRef: emojiPickerRef,\r\n        handleEmojiKeyDown: handleEmojiKeyDown,\r\n        onSelectEmoji: onSelectEmoji,\r\n        openEmojiPicker: openEmojiPicker,\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}