{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bdgcy\\\\Axis\\\\client\\\\src\\\\components\\\\UserList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\nimport { InviteIcon } from '../assets/InviteIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListContainer = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-list__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ListContainer;\n\nconst UserItem = ({\n  user,\n  setSelectedUsers\n}) => {\n  _s();\n\n  const [selected, setSelected] = useState(false);\n\n  const handleSelect = () => {\n    if (selected) {\n      setSelectedUsers(prevUsers => prevUsers.filter(prevUser => prevUser !== user.id));\n    } else {\n      setSelectedUsers(prevUsers => [...prevUsers, user.id]);\n    }\n\n    setSelected(prevSelected => !prevSelected);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-item__wrapper\",\n    onClick: handleSelect,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-item__name-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        image: user.image,\n        name: user.id,\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"user-item__name\",\n        children: user.name || user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), selected ? /*#__PURE__*/_jsxDEV(InviteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-item__invite-empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserItem, \"jTu/AeLw5BOy6ZW1dDNXzAJjzwE=\");\n\n_c2 = UserItem;\n\nconst UserList = ({\n  setSelectedUsers\n}) => {\n  _s2();\n\n  const client = useChatContext();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [listEmpty, setListEmpty] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loading) return;\n      setLoading(true);\n\n      try {\n        const response = await client.queryUsers({\n          id: {\n            $ne: client.userID\n          }\n        }, {\n          id: 1\n        }, {\n          limit: 8\n        });\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setListEmpty(true);\n        }\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    if (client) getUsers();\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list__message\",\n        children: \"Error loading, please refresh and try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (listEmpty) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list__message\",\n        children: \"No users found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ListContainer, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list__message\",\n      children: \"Loading users...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 24\n    }, this) : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/_jsxDEV(UserItem, {\n      index: i,\n      user: user,\n      setSelectedUsers: setSelectedUsers\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(UserList, \"Vook49nvwaR2eJM/xshvKOVQcnU=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = UserList;\nexport default UserList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListContainer\");\n$RefreshReg$(_c2, \"UserItem\");\n$RefreshReg$(_c3, \"UserList\");","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/src/components/UserList.js"],"names":["React","useEffect","useState","Avatar","useChatContext","InviteIcon","ListContainer","children","UserItem","user","setSelectedUsers","selected","setSelected","handleSelect","prevUsers","filter","prevUser","id","prevSelected","image","name","UserList","client","users","setUsers","loading","setLoading","listEmpty","setListEmpty","error","setError","getUsers","response","queryUsers","$ne","userID","limit","length","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Avatar, useChatContext } from 'stream-chat-react';\r\n\r\nimport { InviteIcon } from '../assets/InviteIcon';\r\n\r\nconst ListContainer = ({ children }) => {\r\n    return (\r\n        <div className=\"user-list__container\">\r\n            <div className=\"user-list__header\">\r\n                <p>User</p>\r\n                <p>Invite</p>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UserItem = ({ user, setSelectedUsers }) => {\r\n    const [selected, setSelected] = useState(false)\r\n\r\n    const handleSelect = () => {\r\n        if(selected) {\r\n            setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\r\n        } else {\r\n            setSelectedUsers((prevUsers) => [...prevUsers, user.id])\r\n        }\r\n\r\n        setSelected((prevSelected) => !prevSelected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-item__wrapper\" onClick={handleSelect}>\r\n            <div className=\"user-item__name-wrapper\">\r\n                <Avatar image={user.image} name={user.id} size={32} />\r\n                <p className=\"user-item__name\">{user.name || user.id}</p>\r\n            </div>\r\n            {selected ? <InviteIcon /> : <div className=\"user-item__invite-empty\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst UserList = ({ setSelectedUsers }) => {\r\n    const client = useChatContext();\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [listEmpty, setListEmpty] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            if(loading) return;\r\n\r\n            setLoading(true);\r\n            \r\n            try {\r\n                const response = await client.queryUsers(\r\n                    { id: { $ne: client.userID } },\r\n                    { id: 1 },\r\n                    { limit: 8 } \r\n                );\r\n\r\n                if(response.users.length) {\r\n                    setUsers(response.users);\r\n                } else {\r\n                    setListEmpty(true);\r\n                }\r\n            } catch (error) {\r\n               setError(true);\r\n            }\r\n            setLoading(false);\r\n        }\r\n\r\n        if(client) getUsers()\r\n    }, []);\r\n\r\n    if(error) {\r\n        return (\r\n            <ListContainer>\r\n                <div className=\"user-list__message\">\r\n                    Error loading, please refresh and try again.\r\n                </div>\r\n            </ListContainer>\r\n        )\r\n    }\r\n\r\n    if(listEmpty) {\r\n        return (\r\n            <ListContainer>\r\n                <div className=\"user-list__message\">\r\n                    No users found.\r\n                </div>\r\n            </ListContainer>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ListContainer>\r\n            {loading ? <div className=\"user-list__message\">\r\n                Loading users...\r\n            </div> : (\r\n                users?.map((user, i) => (\r\n                  <UserItem index={i} key={user.id} user={user} setSelectedUsers={setSelectedUsers} />  \r\n                ))\r\n            )}\r\n        </ListContainer>\r\n    )\r\n}\r\n\r\nexport default UserList;"]},"metadata":{},"sourceType":"module"}