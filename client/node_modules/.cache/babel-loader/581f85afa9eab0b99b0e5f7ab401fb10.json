{"ast":null,"code":"'use strict';\n/**\r\nBase interface for a node in an XML document.\r\n\r\n@public\r\n*/\n\nclass XmlNode {\n  constructor() {\n    /**\r\n    Parent node of this node, or `null` if this node has no parent.\r\n      @type {XmlDocument|XmlElement|null}\r\n    @public\r\n    */\n    this.parent = null;\n  }\n  /**\r\n  Document that contains this node, or `null` if this node is not associated\r\n  with a document.\r\n    @type {XmlDocument?}\r\n  @public\r\n  */\n\n\n  get document() {\n    return this.parent ? this.parent.document : null;\n  }\n  /**\r\n  Whether this node is the root node of the document.\r\n    @returns {boolean}\r\n  @public\r\n  */\n\n\n  get isRootNode() {\n    return this.parent ? this.parent === this.document : false;\n  }\n  /**\r\n  Whether whitespace should be preserved in the content of this element and\r\n  its children.\r\n    This is influenced by the value of the special `xml:space` attribute, and\r\n  will be `true` for any node whose `xml:space` attribute is set to\r\n  \"preserve\". If a node has no such attribute, it will inherit the value of\r\n  the nearest ancestor that does (if any).\r\n    @type {boolean}\r\n  @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space\r\n  @public\r\n  */\n\n\n  get preserveWhitespace() {\n    return Boolean(this.parent && this.parent.preserveWhitespace);\n  }\n  /**\r\n  Type of this node.\r\n    The value of this property is a string that matches one of the static `TYPE_*`\r\n  properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).\r\n    The `XmlNode` class itself is a base class and doesn't have its own type name.\r\n    @type {string}\r\n  @public\r\n  */\n\n\n  get type() {\n    return '';\n  }\n  /**\r\n  Returns a JSON-serializable object representing this node, minus properties\r\n  that could result in circular references.\r\n    @returns {{[key: string]: any}}\r\n  @public\r\n  */\n\n\n  toJSON() {\n    /** @type {{[key: string]: any}} */\n    let json = {\n      type: this.type\n    };\n\n    if (this.isRootNode) {\n      json.isRootNode = true;\n    }\n\n    if (this.preserveWhitespace) {\n      json.preserveWhitespace = true;\n    }\n\n    return json;\n  }\n\n}\n/**\r\nType value for an `XmlCdata` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\n\nXmlNode.TYPE_CDATA = 'cdata';\n/**\r\nType value for an `XmlComment` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\nXmlNode.TYPE_COMMENT = 'comment';\n/**\r\nType value for an `XmlDocument` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\nXmlNode.TYPE_DOCUMENT = 'document';\n/**\r\nType value for an `XmlElement` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\nXmlNode.TYPE_ELEMENT = 'element';\n/**\r\nType value for an `XmlProcessingInstruction` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\nXmlNode.TYPE_PROCESSING_INSTRUCTION = 'pi';\n/**\r\nType value for an `XmlText` node.\r\n\r\n@type {string}\r\n@public\r\n*/\n\nXmlNode.TYPE_TEXT = 'text';\nmodule.exports = XmlNode;\n/** @typedef {import('./XmlDocument')} XmlDocument */\n\n/** @typedef {import('./XmlElement')} XmlElement */","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/@rgrove/parse-xml/src/lib/XmlNode.js"],"names":["XmlNode","constructor","parent","document","isRootNode","preserveWhitespace","Boolean","type","toJSON","json","TYPE_CDATA","TYPE_COMMENT","TYPE_DOCUMENT","TYPE_ELEMENT","TYPE_PROCESSING_INSTRUCTION","TYPE_TEXT","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,OAAN,CAAc;AACZC,EAAAA,WAAW,GAAG;AACZ;AACJ;AACA;AACA;AACA;AAEI,SAAKC,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAEc,MAARC,QAAQ,GAAG;AACb,WAAO,KAAKD,MAAL,GACH,KAAKA,MAAL,CAAYC,QADT,GAEH,IAFJ;AAGD;AAED;AACF;AACA;AACA;AACA;;;AAEgB,MAAVC,UAAU,GAAG;AACf,WAAO,KAAKF,MAAL,GACH,KAAKA,MAAL,KAAgB,KAAKC,QADlB,GAEH,KAFJ;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGwB,MAAlBE,kBAAkB,GAAG;AACvB,WAAOC,OAAO,CAAC,KAAKJ,MAAL,IAAe,KAAKA,MAAL,CAAYG,kBAA5B,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIU,MAAJE,IAAI,GAAG;AACT,WAAO,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAEEC,EAAAA,MAAM,GAAG;AACP;AACA,QAAIC,IAAI,GAAG;AACTF,MAAAA,IAAI,EAAE,KAAKA;AADF,KAAX;;AAIA,QAAI,KAAKH,UAAT,EAAqB;AACnBK,MAAAA,IAAI,CAACL,UAAL,GAAkB,IAAlB;AACD;;AAED,QAAI,KAAKC,kBAAT,EAA6B;AAC3BI,MAAAA,IAAI,CAACJ,kBAAL,GAA0B,IAA1B;AACD;;AAED,WAAOI,IAAP;AACD;;AA1FW;AA6Fd;AACA;AACA;AACA;AACA;AACA;;;AACAT,OAAO,CAACU,UAAR,GAAqB,OAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAV,OAAO,CAACW,YAAR,GAAuB,SAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAX,OAAO,CAACY,aAAR,GAAwB,UAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAZ,OAAO,CAACa,YAAR,GAAuB,SAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAb,OAAO,CAACc,2BAAR,GAAsC,IAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAd,OAAO,CAACe,SAAR,GAAoB,MAApB;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,OAAjB;AAEA;;AACA","sourcesContent":["'use strict';\r\n\r\n/**\r\nBase interface for a node in an XML document.\r\n\r\n@public\r\n*/\r\nclass XmlNode {\r\n  constructor() {\r\n    /**\r\n    Parent node of this node, or `null` if this node has no parent.\r\n\r\n    @type {XmlDocument|XmlElement|null}\r\n    @public\r\n    */\r\n    this.parent = null;\r\n  }\r\n\r\n  /**\r\n  Document that contains this node, or `null` if this node is not associated\r\n  with a document.\r\n\r\n  @type {XmlDocument?}\r\n  @public\r\n  */\r\n  get document() {\r\n    return this.parent\r\n      ? this.parent.document\r\n      : null;\r\n  }\r\n\r\n  /**\r\n  Whether this node is the root node of the document.\r\n\r\n  @returns {boolean}\r\n  @public\r\n  */\r\n  get isRootNode() {\r\n    return this.parent\r\n      ? this.parent === this.document\r\n      : false;\r\n  }\r\n\r\n  /**\r\n  Whether whitespace should be preserved in the content of this element and\r\n  its children.\r\n\r\n  This is influenced by the value of the special `xml:space` attribute, and\r\n  will be `true` for any node whose `xml:space` attribute is set to\r\n  \"preserve\". If a node has no such attribute, it will inherit the value of\r\n  the nearest ancestor that does (if any).\r\n\r\n  @type {boolean}\r\n  @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space\r\n  @public\r\n  */\r\n  get preserveWhitespace() {\r\n    return Boolean(this.parent && this.parent.preserveWhitespace);\r\n  }\r\n\r\n  /**\r\n  Type of this node.\r\n\r\n  The value of this property is a string that matches one of the static `TYPE_*`\r\n  properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).\r\n\r\n  The `XmlNode` class itself is a base class and doesn't have its own type name.\r\n\r\n  @type {string}\r\n  @public\r\n  */\r\n  get type() {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n  Returns a JSON-serializable object representing this node, minus properties\r\n  that could result in circular references.\r\n\r\n  @returns {{[key: string]: any}}\r\n  @public\r\n  */\r\n  toJSON() {\r\n    /** @type {{[key: string]: any}} */\r\n    let json = {\r\n      type: this.type\r\n    };\r\n\r\n    if (this.isRootNode) {\r\n      json.isRootNode = true;\r\n    }\r\n\r\n    if (this.preserveWhitespace) {\r\n      json.preserveWhitespace = true;\r\n    }\r\n\r\n    return json;\r\n  }\r\n}\r\n\r\n/**\r\nType value for an `XmlCdata` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_CDATA = 'cdata';\r\n\r\n/**\r\nType value for an `XmlComment` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_COMMENT = 'comment';\r\n\r\n/**\r\nType value for an `XmlDocument` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_DOCUMENT = 'document';\r\n\r\n/**\r\nType value for an `XmlElement` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_ELEMENT = 'element';\r\n\r\n/**\r\nType value for an `XmlProcessingInstruction` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_PROCESSING_INSTRUCTION = 'pi';\r\n\r\n/**\r\nType value for an `XmlText` node.\r\n\r\n@type {string}\r\n@public\r\n*/\r\nXmlNode.TYPE_TEXT = 'text';\r\n\r\nmodule.exports = XmlNode;\r\n\r\n/** @typedef {import('./XmlDocument')} XmlDocument */\r\n/** @typedef {import('./XmlElement')} XmlElement */\r\n"]},"metadata":{},"sourceType":"script"}