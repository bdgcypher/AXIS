{"ast":null,"code":"var _checkForMethod = /*#__PURE__*/require(\"./internal/_checkForMethod\");\n\nvar _curry3 = /*#__PURE__*/require(\"./internal/_curry3\");\n/**\r\n * Returns the elements of the given list or string (or object with a `slice`\r\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\r\n *\r\n * Dispatches to the `slice` method of the third argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.4\r\n * @category List\r\n * @sig Number -> Number -> [a] -> [a]\r\n * @sig Number -> Number -> String -> String\r\n * @param {Number} fromIndex The start index (inclusive).\r\n * @param {Number} toIndex The end index (exclusive).\r\n * @param {*} list\r\n * @return {*}\r\n * @example\r\n *\r\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\r\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\r\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\r\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\r\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\r\n */\n\n\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\nmodule.exports = slice;","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/ramda/src/slice.js"],"names":["_checkForMethod","require","_curry3","slice","fromIndex","toIndex","list","Array","prototype","call","module","exports"],"mappings":"AAAA,IAAIA,eAAe,GACnB,aACAC,OAAO,CAAC,4BAAD,CAFP;;AAIA,IAAIC,OAAO,GACX,aACAD,OAAO,CAAC,oBAAD,CAFP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,KAAK,GACT,aACAD,OAAO,EACP,aACAF,eAAe,CAAC,OAAD,EAAU,SAASG,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AAChE,SAAOC,KAAK,CAACC,SAAN,CAAgBL,KAAhB,CAAsBM,IAAtB,CAA2BH,IAA3B,EAAiCF,SAAjC,EAA4CC,OAA5C,CAAP;AACD,CAFc,CAFR,CAFP;;AAQAK,MAAM,CAACC,OAAP,GAAiBR,KAAjB","sourcesContent":["var _checkForMethod =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_checkForMethod\");\r\n\r\nvar _curry3 =\r\n/*#__PURE__*/\r\nrequire(\"./internal/_curry3\");\r\n/**\r\n * Returns the elements of the given list or string (or object with a `slice`\r\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\r\n *\r\n * Dispatches to the `slice` method of the third argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.4\r\n * @category List\r\n * @sig Number -> Number -> [a] -> [a]\r\n * @sig Number -> Number -> String -> String\r\n * @param {Number} fromIndex The start index (inclusive).\r\n * @param {Number} toIndex The end index (exclusive).\r\n * @param {*} list\r\n * @return {*}\r\n * @example\r\n *\r\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\r\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\r\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\r\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\r\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\r\n */\r\n\r\n\r\nvar slice =\r\n/*#__PURE__*/\r\n_curry3(\r\n/*#__PURE__*/\r\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\r\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\r\n}));\r\n\r\nmodule.exports = slice;"]},"metadata":{},"sourceType":"script"}