{"ast":null,"code":"'use strict';\n\nconst BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nconst BIBYTE_UNITS = ['B', 'kiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\nconst BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];\nconst BIBIT_UNITS = ['b', 'kibit', 'Mibit', 'Gibit', 'Tibit', 'Pibit', 'Eibit', 'Zibit', 'Yibit'];\n/*\r\nFormats the given number using `Number#toLocaleString`.\r\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\r\n- If locale is true, the system default locale is used for translation.\r\n- If no value for locale is specified, the number is returned unmodified.\r\n*/\n\nconst toLocaleString = (number, locale, options) => {\n  let result = number;\n\n  if (typeof locale === 'string' || Array.isArray(locale)) {\n    result = number.toLocaleString(locale, options);\n  } else if (locale === true || options !== undefined) {\n    result = number.toLocaleString(undefined, options);\n  }\n\n  return result;\n};\n\nmodule.exports = (number, options) => {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n  }\n\n  options = Object.assign({\n    bits: false,\n    binary: false\n  }, options);\n  const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;\n\n  if (options.signed && number === 0) {\n    return ` 0 ${UNITS[0]}`;\n  }\n\n  const isNegative = number < 0;\n  const prefix = isNegative ? '-' : options.signed ? '+' : '';\n\n  if (isNegative) {\n    number = -number;\n  }\n\n  let localeOptions;\n\n  if (options.minimumFractionDigits !== undefined) {\n    localeOptions = {\n      minimumFractionDigits: options.minimumFractionDigits\n    };\n  }\n\n  if (options.maximumFractionDigits !== undefined) {\n    localeOptions = Object.assign({\n      maximumFractionDigits: options.maximumFractionDigits\n    }, localeOptions);\n  }\n\n  if (number < 1) {\n    const numberString = toLocaleString(number, options.locale, localeOptions);\n    return prefix + numberString + ' ' + UNITS[0];\n  }\n\n  const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1); // eslint-disable-next-line unicorn/prefer-exponentiation-operator\n\n  number /= Math.pow(options.binary ? 1024 : 1000, exponent);\n\n  if (!localeOptions) {\n    number = number.toPrecision(3);\n  }\n\n  const numberString = toLocaleString(Number(number), options.locale, localeOptions);\n  const unit = UNITS[exponent];\n  return prefix + numberString + ' ' + unit;\n};","map":{"version":3,"sources":["C:/Users/bdgcy/Axis/client/node_modules/pretty-bytes/index.js"],"names":["BYTE_UNITS","BIBYTE_UNITS","BIT_UNITS","BIBIT_UNITS","toLocaleString","number","locale","options","result","Array","isArray","undefined","module","exports","Number","isFinite","TypeError","Object","assign","bits","binary","UNITS","signed","isNegative","prefix","localeOptions","minimumFractionDigits","maximumFractionDigits","numberString","exponent","Math","min","floor","log","log10","length","pow","toPrecision","unit"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst BYTE_UNITS = [\r\n\t'B',\r\n\t'kB',\r\n\t'MB',\r\n\t'GB',\r\n\t'TB',\r\n\t'PB',\r\n\t'EB',\r\n\t'ZB',\r\n\t'YB'\r\n];\r\n\r\nconst BIBYTE_UNITS = [\r\n\t'B',\r\n\t'kiB',\r\n\t'MiB',\r\n\t'GiB',\r\n\t'TiB',\r\n\t'PiB',\r\n\t'EiB',\r\n\t'ZiB',\r\n\t'YiB'\r\n];\r\n\r\nconst BIT_UNITS = [\r\n\t'b',\r\n\t'kbit',\r\n\t'Mbit',\r\n\t'Gbit',\r\n\t'Tbit',\r\n\t'Pbit',\r\n\t'Ebit',\r\n\t'Zbit',\r\n\t'Ybit'\r\n];\r\n\r\nconst BIBIT_UNITS = [\r\n\t'b',\r\n\t'kibit',\r\n\t'Mibit',\r\n\t'Gibit',\r\n\t'Tibit',\r\n\t'Pibit',\r\n\t'Eibit',\r\n\t'Zibit',\r\n\t'Yibit'\r\n];\r\n\r\n/*\r\nFormats the given number using `Number#toLocaleString`.\r\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\r\n- If locale is true, the system default locale is used for translation.\r\n- If no value for locale is specified, the number is returned unmodified.\r\n*/\r\nconst toLocaleString = (number, locale, options) => {\r\n\tlet result = number;\r\n\tif (typeof locale === 'string' || Array.isArray(locale)) {\r\n\t\tresult = number.toLocaleString(locale, options);\r\n\t} else if (locale === true || options !== undefined) {\r\n\t\tresult = number.toLocaleString(undefined, options);\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = (number, options) => {\r\n\tif (!Number.isFinite(number)) {\r\n\t\tthrow new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\r\n\t}\r\n\r\n\toptions = Object.assign({bits: false, binary: false}, options);\r\n\r\n\tconst UNITS = options.bits ?\r\n\t\t(options.binary ? BIBIT_UNITS : BIT_UNITS) :\r\n\t\t(options.binary ? BIBYTE_UNITS : BYTE_UNITS);\r\n\r\n\tif (options.signed && number === 0) {\r\n\t\treturn ` 0 ${UNITS[0]}`;\r\n\t}\r\n\r\n\tconst isNegative = number < 0;\r\n\tconst prefix = isNegative ? '-' : (options.signed ? '+' : '');\r\n\r\n\tif (isNegative) {\r\n\t\tnumber = -number;\r\n\t}\r\n\r\n\tlet localeOptions;\r\n\r\n\tif (options.minimumFractionDigits !== undefined) {\r\n\t\tlocaleOptions = {minimumFractionDigits: options.minimumFractionDigits};\r\n\t}\r\n\r\n\tif (options.maximumFractionDigits !== undefined) {\r\n\t\tlocaleOptions = Object.assign({maximumFractionDigits: options.maximumFractionDigits}, localeOptions);\r\n\t}\r\n\r\n\tif (number < 1) {\r\n\t\tconst numberString = toLocaleString(number, options.locale, localeOptions);\r\n\t\treturn prefix + numberString + ' ' + UNITS[0];\r\n\t}\r\n\r\n\tconst exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\r\n\t// eslint-disable-next-line unicorn/prefer-exponentiation-operator\r\n\tnumber /= Math.pow(options.binary ? 1024 : 1000, exponent);\r\n\r\n\tif (!localeOptions) {\r\n\t\tnumber = number.toPrecision(3);\r\n\t}\r\n\r\n\tconst numberString = toLocaleString(Number(number), options.locale, localeOptions);\r\n\r\n\tconst unit = UNITS[exponent];\r\n\r\n\treturn prefix + numberString + ' ' + unit;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}